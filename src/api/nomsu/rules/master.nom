### Global variables stored on the blockchain
    They get initialized in the `vars.nom` and overridden by the ruleset.
    At the end of each rule computation, the API will update their vaules in 
    `vars.nom`, and after all rules have updated the vars file, the API will 
    run this file to tabulate their updated tallys and update those vaules
    on Tezos in addition to storing the latest set of rule files

use "vars"

$bl_nImmutable=0

repeat:
    try:
        use ("immutable/rule"+$bl_nImmutable)
        $bl_nImmutable += 1
    ..if it fails:
        stop

$bl_nMutable=0
repeat:
    try:
        use ("mutable/rule"+$bl_nMutable)
        $bl_nMutable += 1
    ..if it fails:
        stop

### Parse the mutable rules first - ascending, to ensure rule amendment 
for $ctr in (($bl_nMutable-1) to 0 by -1):
    try:
        use ("mutable/rule"+$ctr)
    ..if it fails:
        say("Error parsing mutable/rule"+($ctr)+".nom")

### Parse the immutable rules last - descending, to ensure rule immutability
for $ctr in (($bl_nImmutable-1) to 0 by -1):
    try:
        use ("immutable/rule"+$ctr)
    ..if it fails:
        say("Error parsing immutable/rule"+($ctr)+".nom")

say("Player starting points = " + $bl_startPoints)
say("Points required to win the game = " + $bl_winPoints)
say("Points gained for passing a rule = " + $bl_rulePassPts)
say("Points gained for voting against a passed rule = " + $bl_voteAgainstPts)
say("Points lost for a rule rejection = " + $bl_ruleFailedPenalty)
say("Daily game window duration = " + $bl_gameWindowDuration)
say("Game start hour (UTC) = " + $bl_gameWindowHourUTC)
say("Player turn duration = " + $bl_turnWindowDuration)
say("Percentage of votes required to pass a rule = " + $bl_voteRatioRequired)
say("Percentage of votes required to transmutate a rule = " + $bl_transmutationVoteRatioRequired)

say("Settle game window finished.")
say("Loaded "+$bl_nImmutable+" immutable rules and "+$bl_nMutable+" mutable rules.")