{
    "swagger": "2.0",
    "info": {
        "description": "A game of Peter Suber's Nomic running on the Tezos network.",
        "title": "Schrodinger's Cup API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/auth": {
            "post": {
                "description": "Authenticate a user with a signed tezos message",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Signed message",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResult"
                        }
                    }
                }
            }
        },
        "/game/proposal/:round": {
            "get": {
                "description": "Fetches a specific rule proposal",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A rule proposal object",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProposalObject"
                        }
                    }
                }
            }
        },
        "/game/propose": {
            "post": {
                "description": "Submit a new rule proposal",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Proposed rule",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RuleProposal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProposalResult"
                        }
                    }
                }
            }
        },
        "/game/vote": {
            "post": {
                "description": "Receive and tabulate votes, stage vote outcome to be processed when game window is settled",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ]
            }
        },
        "/game/votes/:round": {
            "get": {
                "description": "Fetches votes for a specific round",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of votes for a target round",
                        "schema": {
                            "$ref": "#/definitions/handlers.VotesList"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Ping/Health Check",
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "pong",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/players": {
            "get": {
                "description": "Players",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "List of players in the current gameplay session",
                        "schema": {
                            "$ref": "#/definitions/handlers.PlayerList"
                        }
                    }
                }
            }
        },
        "/round": {
            "get": {
                "description": "Players",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The current round, 0 if game has not started, or -1 if no players are online",
                        "schema": {
                            "$ref": "#/definitions/handlers.CurrentRound"
                        }
                    }
                }
            }
        },
        "/test": {
            "post": {
                "description": "Run some arbitrary nomsu code",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Nomsu code to run",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TestInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Nomsu execution result",
                        "schema": {
                            "$ref": "#/definitions/handlers.TestResult"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AuthInput": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                },
                "pubKey": {
                    "type": "string"
                },
                "sig": {
                    "type": "string"
                }
            }
        },
        "handlers.AuthResult": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.CurrentRound": {
            "type": "object",
            "properties": {
                "round": {
                    "type": "integer"
                }
            }
        },
        "handlers.PlayerList": {
            "type": "object",
            "properties": {
                "currentTurn": {
                    "type": "string"
                },
                "nextTurn": {
                    "type": "string"
                },
                "nextTurnAt": {
                    "type": "string"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.ProposalObject": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "passed": {
                    "type": "boolean"
                },
                "proposal": {
                    "type": "string"
                },
                "round": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "handlers.ProposalResult": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "\"OK!\" or error message",
                    "type": "string"
                },
                "round": {
                    "description": "Updated round value",
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handlers.RuleProposal": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Nomsu code",
                    "type": "string"
                },
                "index": {
                    "description": "rule index of the existing rule",
                    "type": "integer"
                },
                "kind": {
                    "description": "Mutable / Immutable",
                    "type": "string"
                },
                "type": {
                    "description": "Update, Create, Delete, Transmute",
                    "type": "string"
                }
            }
        },
        "handlers.TestInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "handlers.TestResult": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                },
                "resultHtml": {
                    "type": "string"
                }
            }
        },
        "handlers.VoteObject": {
            "type": "object",
            "properties": {
                "player": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "vote": {
                    "type": "string"
                }
            }
        },
        "handlers.VotesList": {
            "type": "object",
            "properties": {
                "votes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.VoteObject"
                    }
                }
            }
        }
    }
}